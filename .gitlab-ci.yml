image: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/dewdrop:$DEWDROP_IMAGE_ID

services:
  - ${ARTIFACTORY_SERVER}/dockerhub-remote/docker:dind

stages:
  - smoke-tests
  - sprinkle-tests
  - release
  - publish
  - monitors
  - droplets

variables:
    GIT_SUBMODULE_STRATEGY: recursive

# release prep - updates runtime-init location used for testing
# placeholder for aws v2

# validate Cloudformation templates with cfn-lint
run_cfn_lint:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - cd cloud-tools/cfn-lint
    - pip install -r requirements.txt
    - cfn-lint --template ../../examples/**/*.yaml --override-spec override_propagate.json

# validate README file(s) only contain links that respond with 200 OK
run_link_checker:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:10
  stage: smoke-tests
  tags:
    - docker-executor
  only:
    refs:
      # the current intent is to run only on main and release branches
      - main
      - /^R.*/
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  script:
    - make link_check

# validate parameters match style guide
verify_parameters_match_style_guide:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_parameters
    - make run_expected_diff
  artifacts:
      paths:
          - cloud-tools/parameter-parser/parameters_diff.yaml
          - cloud-tools/parameter-parser/parameters_config.yaml
      when: always
      expire_in: 1 week

# validate outputs match style guide
verify_outputs_match_style_guide:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: smoke-tests
  tags:
    - docker-executor
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  script:
    - apk add --no-cache build-base
    - apk add --no-cache bash
    - make run_compare_outputs
    - make run_expected_outputs_diff
  artifacts:
    paths:
      - cloud-tools/parameter-parser/outputs_diff.yaml
      - cloud-tools/parameter-parser/outputs_config.yaml
    when: always
    expire_in: 1 week

# AWS Template Modules Tests
# This job passes in the test plan to the sprinkler.py script that parses the plan and triggers the dewdrop_test_run
# This job is to be scheduled once the plan has been solidified
# Environment variables:
#   TEST_POLICY: path to test plan, this gets set under the scheduling in gitlab
#   STACK_TYPE: index for elastic search logging, this is set under the scheduling in gitlab
#   DAILY_TEST_TOKEN: token used to trigger git pipeline from the sprinkler script
#   CI_COMMIT_REF_NAME: branch name

# Module: AWS Network Template
aws_network_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/network/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/network/*
      - examples/modules/network/network.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/network/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: AWS Function Template
aws_function_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/function/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/function/*
      - examples/modules/function/function.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/function/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: AWS access Template
aws_access_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/access/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/access/*
      - examples/modules/access/access.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/access/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: AWS DAG Template
aws_dag_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/dag/**/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/dag/**/*
      - examples/modules/dag/dag.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/dag/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: Application Template
aws_application_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/application/**/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/application/**/*
      - examples/modules/application/application.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/application/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: AWS BIGIP Autoscale Template
aws_bigip_autoscale_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/bigip-autoscale/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/bigip-autoscale/*
      - examples/modules/bigip-autoscale/bigip-autoscale.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/bigip-autoscale/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Module: AWS BIGIP Standalone Template
aws_bigip_standalone_module_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/bigip-standalone/**/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/modules/bigip-standalone/**/*
      - examples/modules/bigip-standalone/bigip-standalone.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/modules/bigip-standalone/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Example: AWS BIGIP PAYG Autoscale Template
aws_bigip_autoscale_payg_example_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/autoscale/payg/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/autoscale/payg/*
      - examples/autoscale/payg/autoscale.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/autoscale/payg/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Example: AWS BIGIP BIGIQ Autoscale Template
aws_bigip_autoscale_bigiq_example_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/autoscale/bigiq/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/autoscale/bigiq/*
      - examples/autoscale/bigiq/autoscale.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/autoscale/bigiq/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Example: AWS Quickstart PAYG Template
aws_payg_quickstart_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/quickstart/payg/**/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/quickstart/payg_byol/**/*
      - examples/quickstart/quickstart.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/quickstart/payg/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# Example: AWS Quickstart BYOL Template
aws_byol_quickstart_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - branches
    changes:
      - automated-test-scripts/data/f5-aws-cloudformation-v2/examples/quickstart/byol/**/*
      - automated-test-scripts/f5-aws-cloudformation-v2/examples/quickstart/payg_byol/**/*
      - examples/quickstart/quickstart.yaml
  except:
    refs:
      - schedules
      - triggers
      - pipelines
    variables:
      - $RELEASE_RUNTIME_INIT_TESTS == "true"
  variables:
    TEST_POLICY: automated-test-scripts/data/f5-aws-cloudformation-v2/examples/quickstart/byol/test_policy.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# end of AWS Template Modules Tests

pre_release_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    refs:
      - main
  except:
    refs:
      - schedules
      - triggers
      - pipelines
  variables:
    TEST_POLICY: automated-test-scripts/data/test_policies/pre_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

post_release_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  variables:
    TEST_POLICY: automated-test-scripts/data/test_policies/post_release_test.yaml
    STACK_TYPE: dewdrop-preproduction
  # Added a manual trigger for now so that this job doesn't get triggered after every commit
  when: manual
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

execute_test_job:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: sprinkle-tests
  tags:
    - docker-executor
  only:
    - schedules
  variables:
    TEST_POLICY: set in schedule!
    STACK_TYPE: dewdrop-production
  script:
    - pip install -r cloud-tools/master-job/requirements.txt
    - cloud-tools/master-job/sprinkler.py --test-plan $TEST_POLICY --token $CI_JOB_TOKEN --branch $CI_COMMIT_REF_NAME --stack-type $STACK_TYPE --project-id $CI_PROJECT_ID
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

### Monitors
scheduled_daily_test_monitor:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: monitors
  only:
    refs:
      - schedules
    variables:
      - $MONITORS == "true"
  tags:
    - docker-executor
  script:
    - pip install -r cloud-tools/monitors/licenses/requirements.txt
    - python cloud-tools/monitors/licenses/check_counts.py $LIC_COUNT_TRESHOLD
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure

# This job gets triggered by the sprinkler.py script that get ran by the 'master_test_job' it ingests TEMPLATE_URL
# and TEMPLATE_PARAMETERS which are passed down by the sprinkler.py script. Using the variables runs dewdrop with
# the set environment variables
dewdrop_test_run:
  image: ${ARTIFACTORY_SERVER}/ecosystems-cloudsolutions-docker-dev/dewdrop:$DEWDROP_IMAGE_ID
  stage: droplets
  tags:
    - docker-executor
  variables:
    SSH_KEY: "$SSH_KEY"
    AWS_DEFAULT_REGION: "$AWS_DEFAULT_REGION"
    AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
    AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
    TEMPLATE_URL: "$TEMPLATE_URL"
    TEMPLATE_PARAMETERS: "$TEMPLATE_PARAMETERS"
    STACK_TYPE: "$STACK_TYPE"
    GITLAB_JOB_URL: "$CI_JOB_URL"
  only:
    variables:
      - $RUN_SCHEDULED_DEWDROP_TEST == "true"
  script:
    # the dewdrop image itself does not contain any test files, so ensure dewdrop
    # is run from the known location where test policies expect it to be
    # location: root of the cloud factory repository
    - if [ "$CLOUD_PROVIDER_ENVIRONMENT" == "aws_china" ]; then
    -   AWS_DEFAULT_REGION=$AWS_CHINA_DEFAULT_REGION
    -   AWS_ACCESS_KEY_ID=$AWS_CHINA_ACCESS_KEY_ID
    -   AWS_SECRET_ACCESS_KEY=$AWS_CHINA_SECRET_ACCESS_KEY
    - fi
    - python /dewdrop/dewdrop-docker.py

verify_reg_key_counts:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3.7-alpine
  stage: droplets
  only:
    variables:
      - $VERIFY_REGKEY_COUNT == "true"
  tags:
    - docker-executor
  script:
    - pip install -r build/regkey-count-job/requirements.txt
    - build/regkey-count-job/regkey-count-checker.py

# publish templates to github
publish_to_github:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/node:8
  stage: release
  only:
    - /(^publish-(v\d*[1-9]*\.)(\d).(\d).(\d))/
  script:
    # install jq
    - apt-get update
    - apt-get install -y jq
    # Execute Release script to push source to github repo
    - ./cloud-tools/release-tool/publish_github.sh "$ALLOWED_DIRS" "$ALLOWED_FILES"
  variables:
    ALLOWED_DIRS: "examples .github images"
    ALLOWED_FILES: ".gitignore .gitattributes README.md"
    GITLAB_API_URL: "$AWS_V2_URL"
    GITHUB_API_TOKEN: "$AWS_V2_GITHUB_API_TOKEN"
    GITLAB_PRIVATE_TOKEN: "$AWS_V2_GITLAB_API_TOKEN"

# Check template version, then push the examples/ folder to S3 when a tag in the form of "aws-v1.0.0.0" is added to the main branch
publish_aws_modules_s3:
  image: ${ARTIFACTORY_SERVER}/dockerhub-remote/python:3
  stage: publish
  only:
    - /(^publish-(v\d*[1-9]*\.)(\d).(\d).(\d))/
  script:
    - curl -sL https://deb.nodesource.com/setup_12.x | bash - && apt-get install -yq nodejs build-essential
    - npm install -g npm
    - apt-get install -y jq
    - pip3 install yq awscli
    - VERSION=$(echo ${CI_COMMIT_REF_NAME} | cut -c 9-)
    - echo "Tag version:${VERSION}"
    - TEMPLATE_VERSION=$(cat cloud-tools/parameter-parser/golden_parameters.yaml | yq -r .artifactLocation.Default | awk -F[/,] '{print $2}')
    - echo "Template version:${TEMPLATE_VERSION}"
    - if [[ ${VERSION} != ${TEMPLATE_VERSION} ]]; then exit 1; fi
    - aws s3 cp --recursive --acl public-read examples s3://f5-cft-v2/f5-aws-cloudformation-v2/${VERSION}/examples --metadata-directive REPLACE
  tags:
    - cm-official-docker-executor
